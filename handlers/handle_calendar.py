from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler
import telegram

from typing import Any
from datetime import date
from dotenv import load_dotenv
from utils.dateparser import parse_dates
from utils.typing_task import keep_typing
import os, warnings, asyncio, secrets, random, logging
from utils.life_calendar import create_calendar
from utils.dbtools import get_user_data, set_event, get_events, set_action, get_action, clear_action, delete_event, user_exists
warnings.filterwarnings('ignore')
load_dotenv()

logger = logging.getLogger(__name__)

ACTION_TYPE, EVENT_NAME_POLL, EVENT_NAME_TEXT = range(3)
MONTHS = {1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è',}

def _fmt(d: date) -> str:
    return f'{d.day} {MONTHS[d.month]} {d.year}'

def _first_date(item: dict[str, Any]) -> date:
    _, dates = next(iter(item.items()))
    first = dates if isinstance(dates, str) else dates[0]
    return date.fromisoformat(first)

def events2text(events: list[dict[str, Any]]) -> str:
    lines = []
    for i, item in enumerate(sorted(events, key = _first_date)):
        name, dates = next(iter(item.items()))
        if isinstance(dates, str):
            dates = [dates]
        dates = [date.fromisoformat(d) for d in dates]

        if len(dates) == 1:
            lines.append(f'{i + 1}. {name}: —Å {_fmt(dates[0])} –≥–æ–¥–∞.')
        else:
            start, end = sorted(dates)
            lines.append(f'{i + 1}. {name}: {_fmt(start)} ‚Äì {_fmt(end)} –≥–æ–¥–∞.')
    return '\n'.join(lines)

def _to_event(obj):
    if isinstance(obj, list):
        dates = [date.fromisoformat(d) for d in obj]
        return dates[0] if len(dates) == 1 else tuple(dates[:2])
    if isinstance(obj, str):
        return date.fromisoformat(obj)
    return obj

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî CALENDAR HANDLERS ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

@keep_typing
async def handle_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info('User %s is creating a calendar', update.effective_user.username)
    await asyncio.sleep(3)
    exist = await user_exists(update.effective_user.id) 
    if not exist: 
        await context.bot.send_message(
            chat_id     = update.effective_chat.id,
            text        = f'–ß—Ç–æ–±—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É, —Ç–µ–±–µ —Å–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ –∑–∞—Ä–µ–≥–µ—Å—Ç—Ä–∏—Ä–æ–≤–∞—Ç—å—Å—è. –î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –Ω–∞ /start', 
            parse_mode  = 'Markdown'
        )
        return ConversationHandler.END

    events = await get_events(update.effective_user.id) 
    await clear_action(update.effective_user.id) 
    events = events2text(events)
    keyboard = [
            [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ', callback_data = 'add')],
            [InlineKeyboardButton('–•–æ—á—É –∫–æ–µ-—á—Ç–æ —É–¥–∞–ª–∏—Ç—å',   callback_data = 'remove')],
            [InlineKeyboardButton('–î–∞–≤–∞–π –∫–æ–µ-—á—Ç–æ –ø–æ–º–µ–Ω—è–µ–º', callback_data = 'edit')],
            [InlineKeyboardButton('–†–∏—Å—É–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä—å!',      callback_data = 'calendar')],
            [InlineKeyboardButton('–ù–∏—á–µ–≥–æ –Ω–µ —Ö–æ—á—É',         callback_data = 'stop')],
    ]
    await context.bot.send_message(
        chat_id      = update.effective_chat.id,
        text         = f'–í–æ—Ç, –∏–∑ –∫–∞–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å–æ—Å—Ç–æ–∏—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å.\n\n_{events}_\n\n–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å? –ò–ª–∏, –º–æ–∂–µ—Ç, –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å?', 
        parse_mode   = 'Markdown', 
        reply_markup = InlineKeyboardMarkup(keyboard)
    )
    return ACTION_TYPE

@keep_typing
async def user_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    action = query.data
    logger.info('User %s selected action %s', update.effective_user.username, action)
    await set_action(update.effective_user.id, action)

    user_data = await get_user_data(update.effective_user.id)
    gender = user_data['gender']

    events = await get_events(update.effective_user.id)
    await context.bot.delete_message(chat_id = query.message.chat.id, message_id = query.message.message_id)
    await asyncio.sleep(3)
    if action == 'stop': 
        await context.bot.send_message(
            chat_id     = update.effective_chat.id,
            text        = '–ë—É–¥—É –∂–¥–∞—Ç—å, –ø–æ–∫–∞ —Ç—ã –≤–µ—Ä–Ω–µ—à—å—Å—è! –ù–∞–∂–º–∏ /calendar, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å.' , 
            parse_mode  = 'Markdown'
        )
        return ConversationHandler.END
    elif action == 'add': 
        await context.bot.send_message(
            chat_id    = update.effective_chat.id,
            text       = (
                f'*–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª{"–∞" if gender == "female" else ""} –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å?* –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–ö—É—Ä—é: —Å 1.09.2021¬ª –∏–ª–∏ ¬´–ó–∞–Ω–∏–º–∞–ª–∞—Å—å –ø–ª–∞–≤–∞–Ω–∏–µ–º: —Å 2023 –¥–æ 2025¬ª.\n\n'
                f'–ü–∏—à–∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ï—â–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü–ª–∞–≤–∞–Ω–∏–µ: —Å 4 –¥–æ 22 –ª–µ—Ç¬ª –∏–ª–∏ ¬´–ö—É—Ä—é: —Å 17 –ª–µ—Ç¬ª.\n\n'
                f'_–ì–ª–∞–≤–Ω–æ–µ, –ø–æ—Å—Ç–∞–≤—å –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —è –Ω–µ –∑–∞–ø—É—Ç–∞–ª–∞—Å—å, –∞ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º —è —Ä–∞–∑–±–µ—Ä—É—Å—å._'
            ), 
            parse_mode = 'Markdown'
        )
        return EVENT_NAME_TEXT
    else:
        keyboard = []
        for i, item in enumerate(sorted(events, key = _first_date)):
            name, _ = next(iter(item.items()))
            keyboard.append([InlineKeyboardButton(f'{i + 1}. {name}', callback_data = str(i))])
        if action == 'remove': 
            await context.bot.send_message(
                chat_id      = update.effective_chat.id,
                text         = f'–•–æ—Ä–æ—à–æ, —á—Ç–æ –Ω—É–∂–Ω–æ —É–¥–∞–ª–∏—Ç—å?', 
                parse_mode   = 'Markdown', 
                reply_markup = InlineKeyboardMarkup(keyboard)
            )
        elif action == 'edit': 
            await context.bot.send_message(
                chat_id      = update.effective_chat.id,
                text         = f'–ö–∞–∫–æ–µ —Å–æ–±—ã—Ç–∏–µ —Ö–æ—á–µ—à—å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å?', 
                parse_mode   = 'Markdown', 
                reply_markup = InlineKeyboardMarkup(keyboard)
            ) 
        elif action == 'calendar': 
            keyboard.append([InlineKeyboardButton(f'–ü—Ä–æ—Å—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å, –±–µ–∑ –≤—Å–µ–≥–æ', callback_data = 'empty')])
            await context.bot.send_message(
                chat_id      = update.effective_chat.id,
                text         = f'–ß—Ç–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –Ω–∞ —Ç–≤–æ–µ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ? –í—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç', 
                parse_mode   = 'Markdown', 
                reply_markup = InlineKeyboardMarkup(keyboard)
            ) 
        return EVENT_NAME_POLL 

@keep_typing
async def add_new_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await asyncio.sleep(3)
    answer = update.message.text
    logger.info('User %s added a new event', update.effective_user.username)

    user_data = await get_user_data(update.effective_user.id)
    day, month, year = map(int, user_data['birth'].split('.'))

    try: 
        event_type, _ = answer.split(':')
    except: 
        await context.bot.send_message(
            chat_id      = update.effective_chat.id,
            text         = '–ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Çüòî –ù–∞–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ, –ø–æ—Ç–æ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –≤ –∫–æ–Ω—Ü–µ –ª–∏–±–æ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ª–∏–±–æ –≤–æ–∑—Ä–∞—Å—Ç.\n\n_–ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü–ª–∞–≤–∞–Ω–∏–µ: —Å 16 –¥–æ 23 –ª–µ—Ç¬ª –∏–ª–∏ ¬´–î–∑—é–¥–æ: —Å 25.11.2020¬ª_', 
            parse_mode   = 'Markdown', 
        )
        return EVENT_NAME_TEXT
    try:
        event = parse_dates(answer, date(year, month, day))
    except ValueError:
        await context.bot.send_message(
            chat_id      = update.effective_chat.id,
            text         = '–ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Çüòî –ù–∞–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ, –ø–æ—Ç–æ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –≤ –∫–æ–Ω—Ü–µ –ª–∏–±–æ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ª–∏–±–æ –≤–æ–∑—Ä–∞—Å—Ç.\n\n_–ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü–ª–∞–≤–∞–Ω–∏–µ: —Å 16 –¥–æ 23 –ª–µ—Ç¬ª –∏–ª–∏ ¬´–î–∑—é–¥–æ: —Å 25.11.2020¬ª_',
            parse_mode   = 'Markdown',
        )
        return EVENT_NAME_TEXT
    await set_event(update.effective_user.id, event_type, event)
    return await handle_calendar(update, context)

@keep_typing
async def action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    msg = update.callback_query.message if update.callback_query else update.effective_message
    try:
        await context.bot.delete_message(chat_id=msg.chat.id, message_id=msg.message_id)
    except telegram.error.TelegramError:
        pass
    await asyncio.sleep(3)

    query = update.callback_query
    await query.answer()
    action = await get_action(update.effective_user.id)
    logger.info('Executing action %s for user %s', action, update.effective_user.username)
    if query.data != 'empty':
        index = int(query.data)
        events = await get_events(update.effective_user.id)
        events_sorted = sorted(events, key = _first_date)
        item = events_sorted[index]
        event_type, event_dates = next(iter(item.items()))

    if action == 'remove':
        await delete_event(update.effective_user.id, event_type, event_dates)
        logger.info('Removed event for user %s', update.effective_user.username)
        await context.bot.send_message(
            chat_id      = update.effective_chat.id,
            text         = '–•–æ—Ä–æ—à–æ, —É–¥–∞–ª–∏–ª–∞!', 
            parse_mode   = 'Markdown', 
        )
        return await handle_calendar(update, context)
    
    elif action == 'edit':
        await delete_event(update.effective_user.id, event_type, event_dates)
        name = event_type[0].lower() + event_type[1:] if event_type else event_type
        logger.info('Editing event for user %s', update.effective_user.username)
        await context.bot.send_message(
            chat_id    = update.effective_chat.id,
            text       = (
                f'*–ù–∞–ø–∏—à–∏ –ø—Ä–æ {name} —Å –Ω–æ–≤—ã–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏–ª–∏ –¥–∞—Ç–æ–π –≤ —Ç–∞–∫–æ–º —Ñ–æ—Ä–º–∞—Ç–µ:* ¬´–ö—É—Ä—é: —Å 1.09.2021¬ª –∏–ª–∏ ¬´–ó–∞–Ω–∏–º–∞–ª–∞—Å—å –ø–ª–∞–≤–∞–Ω–∏–µ–º: —Å 2023 –¥–æ 2025¬ª.\n\n'
                f'–ü–∏—à–∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ï—â–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü–ª–∞–≤–∞–Ω–∏–µ: —Å 4 –¥–æ 22 –ª–µ—Ç¬ª –∏–ª–∏ ¬´–ö—É—Ä—é: —Å 17 –ª–µ—Ç¬ª.\n\n'
                f'_–ì–ª–∞–≤–Ω–æ–µ, –ø–æ—Å—Ç–∞–≤—å –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —è –Ω–µ –∑–∞–ø—É—Ç–∞–ª–∞—Å—å, –∞ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º —è —Ä–∞–∑–±–µ—Ä—É—Å—å._'
            ), 
            parse_mode = 'Markdown'
        )
        return EVENT_NAME_TEXT
    
    elif action == 'calendar':
        user_data = await get_user_data(update.effective_user.id)
        day, month, year = map(int, user_data['birth'].split('.'))

        birth = date(year, month, day)
        female = user_data['gender'] == 'female'
        filename = f'tmp/{secrets.token_hex(8)}.png'
        
        logger.info('Drawing calendar for user %s', update.effective_user.username)
        create_calendar(
            birth, fname = filename, female = female,
            event = _to_event(event_dates) if query.data != 'empty' else None,
            label = event_type if query.data != 'empty' else None
        )
        with open(filename, 'rb') as photo:
            if query.data != 'empty': 
                phrases = [
                    '–û—Ç–º–µ—Ç–∏–ª–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ‚Äî –ø–æ—Å–º–æ—Ç—Ä–∏, –∫–∞–∫ —ç—Ç–æ —Å–º–æ—Ç—Ä–∏—Ç—Å—è –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ –≤—Å–µ–π —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏. –ó–∞—Ö–æ—á–µ—à—å –µ—â–µ –æ–¥–∏–Ω ‚Äî –ø–∏—à–∏ /calendar',
                    '–ü—Ä–æ—Å—Ç–∞–≤–∏–ª–∞ —Å–æ–±—ã—Ç–∏—è –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ ‚Äî —Å–º–æ—Ç—Ä–∏, –∫–∞–∫ –≤—ã–≥–ª—è–¥–∏—Ç –æ–±—â–∞—è –∫–∞—Ä—Ç–∏–Ω–∞. –î–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –Ω–∞–∂–º–∏ /calendar',
                    '–í–Ω–µ—Å–ª–∞ –¥–∞—Ç—ã –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Äî –æ—Ü–µ–Ω–∏ –º–∞—Å—à—Ç–∞–± –≤ —Ä–∞–º–∫–∞—Ö –≤—Å–µ–≥–æ —Ç–≤–æ–µ–≥–æ –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ –ø—É—Ç–∏. –ù—É–∂–µ–Ω –µ—â–µ –æ–¥–∏–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Äî –ø–∏—à–∏ /calendar',
                    '–í–∑–≥–ª—è–Ω–∏ –Ω–∞ —ç—Ç–æ –≤ –ø–µ—Ä—Å–ø–µ–∫—Ç–∏–≤–µ –≤—Å–µ–π –∂–∏–∑–Ω–∏. –•–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Äî –Ω–∞–∂–º–∏ /calendar',
                    '–ó–∞—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–ª–∞ –¥–∞—Ç—ã –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ. –î–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –ø–∏—à–∏ /calendar',
                    '–û—Ü–µ–Ω–∏ —ç—Ç–æ –≤ –º–∞—Å—à—Ç–∞–±–µ –≤—Å–µ–≥–æ —Ç–≤–æ–µ–≥–æ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è. –ù—É–∂–µ–Ω –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Äî –ø–∏—à–∏ /calendar',
                    '–ü–æ–ª—É—á–∏–ª–∞—Å—å —Ü–µ–ª–∞—è –≤—Ä–µ–º–µ–Ω–Ω–∞—è –ø–∞–Ω–æ—Ä–∞–º–∞ —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏! –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è –ø–∏—à–∏ /calendar',
                    '–í–æ—Ç, –∫–∞–∫ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –≤ —Ç–≤–æ–µ–º –∂–∏–∑–Ω–µ–Ω–Ω–æ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ. –ó–∞—Ö–æ—á–µ—à—å –µ—â–µ –æ–¥–∏–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Äî –ø–∏—à–∏ /calendar',
                    '–í–Ω–µ—Å–ª–∞ —ç—Ç–æ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä—å ‚Äî –≤–∑–≥–ª—è–Ω–∏ –Ω–∞ –º–∞—Å—à—Ç–∞–±—ã —Å–≤–æ–µ–≥–æ –ø—É—Ç–∏. –•–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –µ—â–µ –æ–¥–∏–Ω –∫–∞–ª–µ–Ω–¥–∞—Ä—å? –ü–∏—à–∏ /calendar',
                    '–°–º–æ—Ç—Ä–∏, –∫–∞–∫ —ç—Ç–æ –≤—ã–≥–ª—è–¥–∏—Ç –≤ —Ä–∞–º–∫–∞—Ö –≤—Å–µ–π —Ç–≤–æ–µ–π –∂–∏–∑–Ω–∏. –î–ª—è –Ω–æ–≤–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ‚Äî –ø–∏—à–∏ /calendar'
                ]
                message = random.choice(phrases)
            else: 
                message = '–ì–æ—Ç–æ–≤–æ, –Ω–∞—Ä–∏—Å–æ–≤–∞–ª–∞ —Ç–≤–æ–π –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å'
            await context.bot.send_document(
                chat_id    = update.effective_chat.id,
                document   = photo,
                caption    = message, 
                parse_mode = 'Markdown'
            )
            os.remove(filename)
        return ConversationHandler.END


from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ContextTypes, ConversationHandler

from typing import Any
from datetime import date
from dotenv import load_dotenv
from utils.typing import _keep_typing
from life_calendar import create_calendar
import os, warnings, asyncio, re, datetime
from utils.dbtools import get_user_data, set_event, get_events, set_action, get_action, clear_action
warnings.filterwarnings('ignore')
load_dotenv()

DATABASE_URL       = os.getenv('DATABASE_URL')
DATABASE_PORT      = os.getenv('DATABASE_PORT')
DATABASE_USER      = os.getenv('DATABASE_USER')
DATABASE_PASSWORD  = os.getenv('DATABASE_PASSWORD')

ACTION_TYPE, EVENT_NAME_POLL, EVENT_NAME_TEXT = range(3)
MONTHS = {1: '—è–Ω–≤–∞—Ä—è', 2: '—Ñ–µ–≤—Ä–∞–ª—è', 3: '–º–∞—Ä—Ç–∞', 4: '–∞–ø—Ä–µ–ª—è', 5: '–º–∞—è', 6: '–∏—é–Ω—è', 7: '–∏—é–ª—è', 8: '–∞–≤–≥—É—Å—Ç–∞', 9: '—Å–µ–Ω—Ç—è–±—Ä—è', 10: '–æ–∫—Ç—è–±—Ä—è', 11: '–Ω–æ—è–±—Ä—è', 12: '–¥–µ–∫–∞–±—Ä—è',}

def _fmt(d: date) -> str:
    return f'{d.day} {MONTHS[d.month]} {d.year}'

def events2text(events: list[dict[str, Any]]) -> str:
    def _first_date(item: dict[str, Any]) -> date:
        _, dates = next(iter(item.items()))
        first = dates if isinstance(dates, str) else dates[0]
        return date.fromisoformat(first)

    lines = []
    for i, item in enumerate(sorted(events, key=_first_date)):
        name, dates = next(iter(item.items()))
        if isinstance(dates, str):
            dates = [dates]
        dates = [date.fromisoformat(d) for d in dates]

        if len(dates) == 1:
            lines.append(f'{name}: —Å {_fmt(dates[0])} –≥–æ–¥–∞.')
        else:
            start, end = sorted(dates)
            lines.append(f'{i + 1}. {name}: {_fmt(start)} ‚Äì {_fmt(end)} –≥–æ–¥–∞.')
    return '\n'.join(lines)

# ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî CALENDAR HANDLERS ‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî

async def handle_calendar(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stop_event  = asyncio.Event()
    typing_task = context.application.create_task(_keep_typing(update.effective_chat.id, context.bot, stop_event))
    await asyncio.sleep(3)

    events = await get_events(update.effective_user.id) 
    await clear_action(update.effective_user.id) 
    events = events2text(events)
    keyboard = [
            [InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ',     callback_data = 'add')],
            [InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —á—Ç–æ-—Ç–æ',             callback_data = 'remove')],
            [InlineKeyboardButton('–ü–æ–º–µ–Ω—è—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–µ –∏–ª–∏ –¥–∞—Ç—ã', callback_data = 'edit')],
            [InlineKeyboardButton('–ù–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å',       callback_data = 'calendar')],
            [InlineKeyboardButton('–ù–∞–∑–∞–¥',                      callback_data = 'stop')],
    ]
    stop_event.set()
    await typing_task
    await context.bot.send_message(
        chat_id      = update.effective_chat.id,
        text         = f'–í–æ—Ç, –∏–∑ –∫–∞–∫–∏—Ö —Å–æ–±—ã—Ç–∏–π —Å–æ—Å—Ç–æ–∏—Ç —Ç–≤–æ—è –∂–∏–∑–Ω—å.\n\n_{events}_\n\n–•–æ—á–µ—à—å —á—Ç–æ-—Ç–æ –ø–æ–º–µ–Ω—è—Ç—å? –ò–ª–∏, –º–æ–∂–µ—Ç, –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å –∫–∞–ª–µ–Ω–¥–∞—Ä—å?', 
        parse_mode   = 'Markdown', 
        reply_markup = InlineKeyboardMarkup(keyboard)
    )
    return ACTION_TYPE

async def user_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stop_event  = asyncio.Event()
    typing_task = context.application.create_task(_keep_typing(update.effective_chat.id, context.bot, stop_event))

    query = update.callback_query 
    await query.answer()
    action = query.data
    await set_action(update.effective_user.id, action)

    user_data = await get_user_data(update.effective_user.id) 
    gender = user_data['gender']

    events = await get_events(update.effective_user.id) 
    names = [list(event.keys())[0] for event in events]
    await context.bot.delete_message(chat_id = query.message.chat.id, message_id = query.message.message_id)
    await asyncio.sleep(3)
    
    stop_event.set()
    await typing_task
    if action == 'stop': 
        stop_event.set()
        await typing_task
        await context.bot.send_message(
            chat_id     = update.effective_chat.id,
            text        = '–ë—É–¥—É –∂–¥–∞—Ç—å, –ø–æ–∫–∞ —Ç—ã –≤–µ—Ä–Ω–µ—à—å—Å—è! –ù–∞–∂–º–∏ /calendar, –µ—Å–ª–∏ –∑–∞—Ö–æ—á–µ—à—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å.' , 
            parse_mode  = 'Markdown'
        )
        return ConversationHandler.END
    elif action == 'add': 
        await context.bot.send_message(
            chat_id    = update.effective_chat.id,
            text       = (
                f'**–ß—Ç–æ –±—ã —Ç—ã —Ö–æ—Ç–µ–ª{"–∞" if gender == "female" else ""} –¥–æ–±–∞–≤–∏—Ç—å –Ω–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—å?** –ù–∞–ø–∏—à–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ ¬´–ö—É—Ä—é: —Å 1.09.2021¬ª –∏–ª–∏ ¬´–ó–∞–Ω–∏–º–∞–ª–∞—Å—å –ø–ª–∞–≤–∞–Ω–∏–µ–º: —Å 2023 –¥–æ 2025¬ª.\n\n'
                f'–ü–∏—à–∏ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì. –ï—â–µ –º–æ–∂–µ—à—å –Ω–∞–ø–∏—Å–∞—Ç—å –≤–æ–∑—Ä–∞—Å—Ç, –Ω–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü–ª–∞–≤–∞–Ω–∏–µ: —Å 4 –¥–æ 22 –ª–µ—Ç¬ª –∏–ª–∏ ¬´–ö—É—Ä—é: —Å 17 –ª–µ—Ç¬ª.\n\n'
                f'_–ì–ª–∞–≤–Ω–æ–µ, –ø–æ—Å—Ç–∞–≤—å –¥–≤–æ–µ—Ç–æ—á–∏–µ –ø–æ—Å–ª–µ –Ω–∞–∑–≤–∞–Ω–∏—è, —á—Ç–æ–±—ã —è –Ω–µ –∑–∞–ø—É—Ç–∞–ª–∞—Å—å, –∞ —Å –æ—Å—Ç–∞–ª—å–Ω—ã–º —è —Ä–∞–∑–±–µ—Ä—É—Å—å._'
            ), 
            parse_mode = 'Markdown'
        )
        return EVENT_NAME_TEXT
    else:
        if action == 'remove': 
            keyboard = [InlineKeyboardButton(name, callback_data = i) for i, name in enumerate(names)] 
            await context.bot.send_message(
                chat_id      = update.effective_chat.id,
                text         = f'–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å?', 
                parse_mode   = 'Markdown', 
                reply_markup = InlineKeyboardMarkup(keyboard)
            )
        elif action == 'edit': 
            keyboard = [InlineKeyboardButton(name, callback_data = i) for i, name in enumerate(names)] 
            await context.bot.send_message(
                chat_id      = update.effective_chat.id,
                text         = f'–ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å?', 
                parse_mode   = 'Markdown', 
                reply_markup = InlineKeyboardMarkup(keyboard)
            ) 
        elif action == 'calendar': 
            keyboard = [InlineKeyboardButton(name, callback_data = i) for i, name in enumerate(names)] 
            await context.bot.send_message(
                chat_id      = update.effective_chat.id,
                text         = f'–ß—Ç–æ —á—Ç–æ –º–Ω–µ –Ω–∞–Ω–µ—Å—Ç–∏ –Ω–∞ —Ç–≤–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å?', 
                parse_mode   = 'Markdown', 
                reply_markup = InlineKeyboardMarkup(keyboard)
            ) 
        return EVENT_NAME_POLL 

async def add_new_event(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stop_event  = asyncio.Event()
    typing_task = context.application.create_task(_keep_typing(update.effective_chat.id, context.bot, stop_event))
    await asyncio.sleep(3)
    answer = update.message.text 

    user_data = await get_user_data(update.effective_user.id)
    day, month, year = map(int, user_data['birth'].split('.'))
    birth = date(year, month, day)

    try: 
        event_type, _ = answer.split(':')
    except: 
        stop_event.set()
        await typing_task
        await context.bot.send_message(
            chat_id      = update.effective_chat.id,
            text         = '–ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Çüòî –ù–∞–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ, –ø–æ—Ç–æ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –≤ –∫–æ–Ω—Ü–µ –ª–∏–±–æ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ª–∏–±–æ –≤–æ–∑—Ä–∞—Å—Ç.\n\n_–ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü–ª–∞–≤–∞–Ω–∏–µ: —Å 16 –¥–æ 23 –ª–µ—Ç¬ª –∏–ª–∏ ¬´–î–∑—é–¥–æ: —Å 25.11.2020¬ª_', 
            parse_mode   = 'Markdown', 
        )
        return EVENT_NAME_TEXT

    try:
        dates = list(map(int, re.findall(r'\d+', answer)))
        if len(dates) == 1: 
            event = date(year + dates[0] + ((month, day) > (8, 31)), 1, 1)
        elif len(dates) == 2: 
            start, end = sorted(dates)
            start = date(year + start + ((month, day) > (8, 31)), 1, 7)
            end   = date(year + end + ((month, day) > (8, 31)), 12, 31)
            event = (start, end)
        else: 
            raise ValueError(f'Expected 1 or 2 numbers')
    except: 
        try:
            dates = []
            for day, month, year in re.findall(r'\b(\d{1,2})\.(\d{1,2})\.(\d{2,4})\b', answer):
                y = int(year)
                if y < 100:
                    y += 2000 if y < 50 else 1900
                try:
                    dates.append(date(y, int(month), int(day)))
                except ValueError:
                    continue 
            if not dates:
                raise ValueError('–ù–µ –Ω–∞–π–¥–µ–Ω–æ –Ω–∏ –æ–¥–Ω–æ–π –¥–∞—Ç—ã')
            if len(dates) > 2:
                raise ValueError('–û–∂–∏–¥–∞–ª–æ—Å—å –Ω–µ –±–æ–ª—å—à–µ –¥–≤—É—Ö –¥–∞—Ç')
            event = tuple(dates) if len(dates) == 2 else dates[0]
        except: 
            stop_event.set()
            await typing_task
            await context.bot.send_message(
                chat_id      = update.effective_chat.id,
                text         = 'DateError. –ù–µ –º–æ–≥—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å —Ç–≤–æ–π —Ç–µ–∫—Å—Çüòî –ù–∞–ø–∏—à–∏ —Å–æ–±—ã—Ç–∏–µ, –ø–æ—Ç–æ–º –¥–≤–æ–µ—Ç–æ—á–∏–µ –∏ –≤ –∫–æ–Ω—Ü–µ –ª–∏–±–æ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì, –ª–∏–±–æ –≤–æ–∑—Ä–∞—Å—Ç.\n\n_–ù–∞–ø—Ä–∏–º–µ—Ä, ¬´–ü–ª–∞–≤–∞–Ω–∏–µ: —Å 16 –¥–æ 23 –ª–µ—Ç¬ª –∏–ª–∏ ¬´–î–∑—é–¥–æ: —Å 25.11.2020¬ª_', 
                parse_mode   = 'Markdown', 
            )
            return EVENT_NAME_TEXT
            
    await set_event(update.effective_user.id, event_type, event)
    stop_event.set()
    await typing_task
    return await handle_calendar(update, context)

async def action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    stop_event  = asyncio.Event()
    typing_task = context.application.create_task(_keep_typing(update.effective_chat.id, context.bot, stop_event))
    await asyncio.sleep(3)

    query = update.callback_query 
    await query.answer()
    answer = query.data
    action = await get_action(update.effective_user.id)